@using Microsoft.EntityFrameworkCore
@using Katering.Entities
@using Katering.Data.Food
@inject IDbContextFactory<KateringDbContext> DbContextFactory
@inject IJSRuntime JSRuntime

<h2>Manage Categories</h2>
<input type="text" @bind="searchTerm" placeholder="Search categories by ID" />
<button @onclick="SearchCategoriesById">Search</button>
@if (categories != null && categories.Any())
{
    <div style="display: flex; align-items: center; font-weight: bold;">
        <span style="width: 100px;">ID</span>
        <span style="width: 300px;">Name</span>
        <span style="width: 150px;">Actions</span>
    </div>
    <ul>
        @foreach (var category in categories)
        {
            <li style="text-align: left;">
                <div style="display: flex; align-items: center;">
                    @if (editingCategoryId == category.MealCategoryId)
                    {
                        <span style="width: 100px;">@category.MealCategoryId</span>
                        <input type="text" @bind="editName" placeholder="@category.Name" style="width: 300px;" />
                        <button @onclick="() => ConfirmSaveEdit(category.MealCategoryId)" style="margin-left: 10px;">Save</button>
                        <button @onclick="CancelEdit" style="margin-left: 10px;">Cancel</button>
                    }
                    else
                    {
                        <span style="width: 100px;">@category.MealCategoryId</span>
                        <span style="width: 300px;">@category.Name</span>
                        <button @onclick="() => EditCategory(category)" style="margin-left: 10px;">Edit</button>
                        <button @onclick="() => ConfirmDeleteCategory(category.MealCategoryId, category.Name)" style="margin-left: 10px;">Delete</button>
                    }
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>Enter correct Search value</p>
}

@code {
    private string searchTerm;
    private List<MealCategory> categories = new List<MealCategory>();
    private int? editingCategoryId = null;
    private string editName = string.Empty;

    private async Task SearchCategoriesById()
    {
        using var dbContext = DbContextFactory.CreateDbContext();
        if (int.TryParse(searchTerm, out int categoryId))
        {
            categories = await dbContext.MealCategories
            .Where(c => c.MealCategoryId == categoryId)
            .ToListAsync();
        }
        else
        {
            categories = await dbContext.MealCategories.ToListAsync();
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        using var dbContext = DbContextFactory.CreateDbContext();
        var categoryToDelete = await dbContext.MealCategories.FindAsync(categoryId);

        if (categoryToDelete != null)
        {
            dbContext.MealCategories.Remove(categoryToDelete);
            await dbContext.SaveChangesAsync();
            categories = await dbContext.MealCategories.ToListAsync();
        }
    }

    private async Task ConfirmDeleteCategory(int categoryId, string categoryName)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete {categoryName}?" });
        if (confirmed)
        {
            await DeleteCategory(categoryId);
            categories = null;
        }
    }

    private void EditCategory(MealCategory category)
    {
        editingCategoryId = category.MealCategoryId;
        editName = category.Name ?? string.Empty;
    }

    private async Task ConfirmSaveEdit(int categoryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to save changes?" });
        if (confirmed)
        {
            await SaveEdit(categoryId);
            categories = null;
        }
    }

    private async Task SaveEdit(int categoryId)
    {
        editingCategoryId = categoryId;
        using var dbContext = DbContextFactory.CreateDbContext();
        var categoryToEdit = await dbContext.MealCategories.FindAsync(categoryId);

        if (categoryToEdit != null)
        {
            categoryToEdit.Name = editName;

            await dbContext.SaveChangesAsync();
            categories = await dbContext.MealCategories.ToListAsync();
            editingCategoryId = null;
        }
    }

    private void CancelEdit()
    {
        editingCategoryId = null;
    }
}