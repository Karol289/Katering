@using Microsoft.EntityFrameworkCore
@using Katering.Entities
@using Katering.Data.Food
@inject IDbContextFactory<KateringDbContext> DbContextFactory
@inject IJSRuntime JSRuntime

<h2>Manage Meals</h2>
<input type="text" @bind="searchTerm" placeholder="Search meals by ID" />
<button @onclick="SearchMealsById">Search</button>
@if (meals != null && meals.Any())
{
    <div style="display: flex; align-items: center; font-weight: bold;">
        <span style="width: 100px;">ID</span>
        <span style="width: 200px;">Name</span>
        <span style="width: 100px;">Calories</span>
        <span style="width: 100px;">Price</span>
        <span style="width: 200px;">Description</span>
        <span style="width: 150px;">Actions</span>
    </div>
    <ul>
        @foreach (var meal in meals)
        {
            <li style="text-align: left;">
                <div style="display: flex; align-items: center;">
                    @if (editingMealId == meal.MealId)
                    {
                        <input type="text" @bind="editName" placeholder="@meal.Name" style="width: 200px;" />
                        <input type="number" @bind="editCalories" placeholder="@meal.Calories" style="width: 100px;" />
                        <input type="number" @bind="editPrice" placeholder="@meal.Price" style="width: 100px;" />
                        <input type="text" @bind="editDescription" placeholder="@meal.Description" style="width: 200px;" />
                        <button @onclick="() => ConfirmSaveEdit(meal.MealId)" style="margin-left: 10px;">Save</button>
                        <button @onclick="CancelEdit" style="margin-left: 10px;">Cancel</button>
                    }
                    else
                    {
                        <span style="width: 100px;">@meal.MealId</span>
                        <span style="width: 200px;">@meal.Name</span>
                        <span style="width: 100px;">@meal.Calories</span>
                        <span style="width: 100px;">@meal.Price</span>
                        <span style="width: 200px;">@meal.Description</span>
                        <button @onclick="() => EditMeal(meal)" style="margin-left: 10px;">Edit</button>
                        <button @onclick="() => ConfirmDeleteMeal(meal.MealId, meal.Name)" style="margin-left: 10px;">Delete</button>
                    }
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>Enter correct Search value</p>
}

@code {
    private string searchTerm;
    private List<Meal> meals = new List<Meal>();
    private int? editingMealId = null;
    private string editName = string.Empty;
    private int? editCalories = null;
    private double? editPrice = null;
    private int? editDiet = null;
    private int? editMealCategory = null;
    private string editDescription = string.Empty;

    private async Task SearchMealsById()
    {
        using var dbContext = DbContextFactory.CreateDbContext();
        if (int.TryParse(searchTerm, out int mealId))
        {
            meals = await dbContext.Meals
            .Where(m => m.MealId == mealId)
            .ToListAsync();
        }
        else
        {
            meals = await dbContext.Meals.ToListAsync();
        }
    }

    private async Task DeleteMeal(int mealId)
    {
        using var dbContext = DbContextFactory.CreateDbContext();
        var mealToDelete = await dbContext.Meals.FindAsync(mealId);

        if (mealToDelete != null)
        {
            dbContext.Meals.Remove(mealToDelete);
            await dbContext.SaveChangesAsync();
            meals = await dbContext.Meals.ToListAsync();
        }
    }

    private async Task ConfirmDeleteMeal(int mealId, string mealName)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete {mealName}?" });
        if (confirmed)
        {
            await DeleteMeal(mealId);
            meals = null;
        }
    }

    private void EditMeal(Meal meal)
    {
        editingMealId = meal.MealId;
        editName = meal.Name ?? string.Empty;
        editCalories = meal.Calories;
        editPrice = meal.Price;
        editDiet = meal.Diet?.DietId;
        editMealCategory = meal.MealCategory?.MealCategoryId;
        editDescription = meal.Description ?? string.Empty;
    }

    private async Task ConfirmSaveEdit(int mealId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to save changes?" });
        if (confirmed)
        {
            await SaveEdit(mealId);
            meals = null;
        }
    }

    private async Task SaveEdit(int mealId)
    {
        editingMealId = mealId;
        using var dbContext = DbContextFactory.CreateDbContext();
        var mealToEdit = await dbContext.Meals.FindAsync(mealId);

        if (mealToEdit != null)
        {
            mealToEdit.Name = editName;
            mealToEdit.Calories = editCalories;
            mealToEdit.Price = editPrice;
            mealToEdit.Description = editDescription;

            if (editDiet.HasValue)
            {
                mealToEdit.Diet = await dbContext.Diets.FindAsync(editDiet.Value);
            }

            if (editMealCategory.HasValue)
            {
                mealToEdit.MealCategory = await dbContext.MealCategories.FindAsync(editMealCategory.Value);
            }

            await dbContext.SaveChangesAsync();
            meals = await dbContext.Meals.ToListAsync();
            editingMealId = null;
        }
    }

    private void CancelEdit()
    {
        editingMealId = null;
    }
}