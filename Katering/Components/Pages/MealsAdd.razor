@page "/mealsAdd"
@using Microsoft.EntityFrameworkCore
@using Katering.Entities
@using Katering.Data.Food
@inject HttpClient Http
@inject Katering.Data.Service.MealsService MealsService
@inject NavigationManager NavigationManager

<h2>Manage Meals</h2>

<!-- Form to add a new meal -->
<h3>Add New Meal</h3>
<div>
    <label>Name:</label>
    <input type="text" @bind="mealName" placeholder="Meal name" />
</div>
<div>
    <label>Calories:</label>
    <input type="number" @bind="mealCalories" placeholder="Calories" />
</div>
<div>
    <label>Price:</label>
    <input type="number" step="0.01" @bind="mealPrice" placeholder="Price" />
</div>
<div>
    <label>Description:</label>
    <textarea @bind="mealDescription" placeholder="Meal description"></textarea>
</div>
<div>
    <label>Diet:</label>
    <select @bind="selectedDietId">
        <option value="">-- Select Diet --</option>
        @foreach (var diet in diets)
        {
            <option value="@diet.DietId">@diet.Name</option>
        }
    </select>
</div>
<div>
    <label>Meal Category:</label>
    <select @bind="selectedCategoryId">
        <option value="">-- Select Category --</option>
        @foreach (var category in mealCategories)
        {
            <option value="@category.MealCategoryId">@category.Name</option>
        }
    </select>
</div>
<button @onclick="AddMeal">Add Meal</button>

<!-- List of meals -->
<h3>Existing Meals</h3>
@if (meals != null && meals.Any())
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Calories</th>
                <th>Price</th>
                <th>Description</th>
                <th>Diet</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var meal in meals)
            {
                <tr>
                    <td>@meal.Name</td>
                    <td>@meal.Calories</td>
                    <td>@meal.Price</td>
                    <td>@meal.Description</td>
                    <td>@meal.Diet?.Name</td>
                    <td>@meal.MealCategory?.Name</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No meals available.</p>
}


@if (isLoading)
{
    <p>Loading...</p>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}


@if (isLoading)
{
    <p>Loading...</p>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private string mealName = string.Empty;
    private int? mealCalories = null;
    private double? mealPrice = null;
    private string mealDescription = string.Empty;
    private int? selectedDietId = null;
    private int? selectedCategoryId = null;
    private List<Diet> diets = new();
    private List<MealCategory> mealCategories = new();
    private List<Meal> meals = new();

    private bool isLoading = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            await ReloadTables();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ReloadTables()
    {
        // Pobranie diet
        diets = await MealsService.GetDietsAsync();

        // Pobranie kategorii posiłków
        mealCategories = await MealsService.GetMealCategoriesAsync();

        // Pobranie wszystkich posiłków
        meals = await MealsService.GetMealsAsync();
    }

    // private void OnDietChanged(ChangeEventArgs e)
    // {
    //     var selectedDietId = int.Parse(e.Value.ToString());
    //     meal.Diet = diets.FirstOrDefault(d => d.DietId == selectedDietId);
    // }

    // private void OnMealCategoryChanged(ChangeEventArgs e)
    // {
    //     var selectedCategoryId = int.Parse(e.Value.ToString());
    //     meal.MealCategory = mealCategories.FirstOrDefault(c => c.MealCategoryId == selectedCategoryId);
    // }

    // private async Task AddMeal()
    // {
    //     try
    //     {
    //         isLoading = true;

    //         // Wysłanie danych do API
    //         var response = await Http.PostAsJsonAsync("api/Meals", meal);

    //         if (response.IsSuccessStatusCode)
    //         {
    //             NavigationManager.NavigateTo("/meals");
    //         }
    //         else
    //         {
    //             var error = await response.Content.ReadAsStringAsync();
    //             errorMessage = $"Failed to add meal: {error}";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"An error occurred: {ex.Message}";
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //     }
    // }

    private async Task AddMeal()
    {
        if (string.IsNullOrWhiteSpace(mealName) || !mealCalories.HasValue || !mealPrice.HasValue)
        {
            Console.WriteLine("Please fill out all required fields.");
            return;
        }

        var newMeal = new Meal
            {
                Name = mealName,
                Calories = mealCalories.Value,
                Price = mealPrice.Value,
                Description = mealDescription,
                Diet = diets.FirstOrDefault(d => d.DietId == selectedDietId),
                MealCategory = mealCategories.FirstOrDefault(mc => mc.MealCategoryId == selectedCategoryId)
            };

        await MealsService.AddMealAsync(newMeal);
        await ReloadTables(); // Reload meals to update the list
        ResetForm();
    }

    private void EditMeal(Meal meal)
    {
        //editingMealId = meal.MealId;
        mealName = meal.Name;
        mealCalories = meal.Calories;
        mealPrice = meal.Price;
        mealDescription = meal.Description;
    }

    private void CancelEdit()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        mealName = string.Empty;
        mealCalories = null;
        mealPrice = null;
        mealDescription = string.Empty;
        selectedDietId = null;
        selectedCategoryId = null;
    }
}