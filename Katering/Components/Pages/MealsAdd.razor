@page "/mealsAdd"
@using Microsoft.EntityFrameworkCore
@using Katering.Entities
@using Katering.Data.Food
@inject Katering.Data.Service.MealsService MealsService
@inject NavigationManager NavigationManager

<h2>Manage Meals</h2>

<!-- Form to add or edit a meal -->
<h3>@(isEditing ? "Edit Meal" : "Add New Meal")</h3>
<div>
    <label>Name:</label>
    <input type="text" @bind="mealName" placeholder="Meal name" />
</div>
<div>
    <label>Calories:</label>
    <input type="number" @bind="mealCalories" placeholder="Calories" />
</div>
<div>
    <label>Price:</label>
    <input type="number" step="0.01" @bind="mealPrice" placeholder="Price" />
</div>
<div>
    <label>Description:</label>
    <textarea @bind="mealDescription" placeholder="Meal description"></textarea>
</div>
<div>
    <label>Diet:</label>
    <select @bind="selectedDietId">
        <option value="">-- Select Diet --</option>
        @foreach (var diet in diets)
        {
            <option value="@diet.DietId">@diet.Name</option>
        }
    </select>
</div>
<div>
    <label>Meal Category:</label>
    <select @bind="selectedCategoryId">
        <option value="">-- Select Category --</option>
        @foreach (var category in mealCategories)
        {
            <option value="@category.MealCategoryId">@category.Name</option>
        }
    </select>
</div>
<button @onclick="SaveMeal">@(isEditing ? "Update Meal" : "Add Meal")</button>
@if (isEditing)
{
    <button @onclick="CancelEdit">Cancel Edit</button>
}

<!-- List of meals -->
<h3 align="center">Existing Meals</h3>
@if (meals != null && meals.Any())
{
    <table align="center">
        <thead>
            <tr>
                <th>Name</th>
                <th>Calories</th>
                <th>Price</th>
                <th>Description</th>
                <th>Diet</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var meal in meals)
            {
                <tr>
                    <td>@meal.Name</td>
                    <td>@meal.Calories</td>
                    <td>@meal.Price</td>
                    <td>@meal.Description</td>
                    <td>@meal.Diet?.Name</td>
                    <td>@meal.MealCategory?.Name</td>
                    <td>
                        <button @onclick="() => EditMeal(meal)">Edit</button>
                        <button @onclick="() => DeleteMeal(meal.MealId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No meals available.</p>
}

@if (isLoading)
{
    <p>Loading...</p>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private string mealName = string.Empty;
    private int? mealCalories = null;
    private double? mealPrice = null;
    private string mealDescription = string.Empty;
    private int? selectedDietId = null;
    private int? selectedCategoryId = null;
    private int? editingMealId = null;

    private List<Diet> diets = new();
    private List<MealCategory> mealCategories = new();
    private List<Meal> meals = new();

    private bool isLoading = false;
    private string? errorMessage;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            await ReloadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ReloadData()
    {
        diets = await MealsService.GetDietsAsync();
        mealCategories = await MealsService.GetMealCategoriesAsync();
        meals = await MealsService.GetMealsAsync();
        errorMessage = null;
    }

    private async Task SaveMeal()
    {
        if (string.IsNullOrWhiteSpace(mealName) || !mealCalories.HasValue || !mealPrice.HasValue)
        {
            errorMessage = "Please fill out all required fields.";
            return;
        }

        try
        {
            isLoading = true;

            var meal = new Meal
                {
                    Name = mealName,
                    Calories = mealCalories.Value,
                    Price = mealPrice.Value,
                    Description = mealDescription,
                    Diet = diets.FirstOrDefault(d => d.DietId == selectedDietId),
                    MealCategory = mealCategories.FirstOrDefault(mc => mc.MealCategoryId == selectedCategoryId)
                };

            if (isEditing && editingMealId.HasValue)
            {
                meal.MealId = editingMealId.Value;
                await MealsService.UpdateMealAsync(meal);
                isEditing = false;
            }
            else
            {
                await MealsService.AddMealAsync(meal);
            }

            await ReloadData();
            ResetForm();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteMeal(int mealId)
    {
        try
        {
            isLoading = true;
            await MealsService.DeleteMealAsync(mealId);
            await ReloadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditMeal(Meal meal)
    {
        editingMealId = meal.MealId;
        mealName = meal.Name;
        mealCalories = meal.Calories;
        mealPrice = meal.Price;
        mealDescription = meal.Description;
        selectedDietId = meal.Diet?.DietId;
        selectedCategoryId = meal.MealCategory?.MealCategoryId;
        isEditing = true;
    }

    private void CancelEdit()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        mealName = string.Empty;
        mealCalories = null;
        mealPrice = null;
        mealDescription = string.Empty;
        selectedDietId = null;
        selectedCategoryId = null;
        editingMealId = null;
        isEditing = false;
    }
}
