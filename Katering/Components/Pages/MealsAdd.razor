@page "/mealsAdd"
@using Microsoft.EntityFrameworkCore
@using Katering.Entities
@using Katering.Data.Food
@inject HttpClient Http
@inject Katering.Data.Service.MealsService MealsService
@inject NavigationManager NavigationManager

<div class="form-group">
    <label for="name">Meal Name</label>
    <input id="name" class="form-control" @bind="meal.Name" />
</div>

<div class="form-group">
    <label for="diet">Diet</label>
    <select id="diet" class="form-control" @onchange="OnDietChanged">
        <option value="">Select a diet</option>
        @foreach (var diet in diets)
        {
            <option value="@diet.DietId">@diet.Name</option>
        }
    </select>
</div>

<div class="form-group">
    <label for="mealCategory">Meal Category</label>
    <select id="mealCategory" class="form-control" @onchange="OnMealCategoryChanged">
        <option value="">Select a category</option>
        @foreach (var category in mealCategories)
        {
            <option value="@category.MealCategoryId">@category.Name</option>
        }
    </select>
</div>

<div class="form-group">
    <label for="calories">Calories</label>
    <input id="calories" type="number" class="form-control" @bind="meal.Calories" />
</div>

<div class="form-group">
    <label for="price">Price</label>
    <input id="price" type="number" step="0.01" class="form-control" @bind="meal.Price" />
</div>

<div class="form-group">
    <label for="description">Description</label>
    <textarea id="description" class="form-control" @bind="meal.Description"></textarea>
</div>

<button class="btn btn-primary" @onclick="AddMeal">Add Meal</button>

@if (isLoading)
{
    <p>Loading...</p>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}


@if (isLoading)
{
    <p>Loading...</p>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private Meal meal = new Meal();
    private List<Diet> diets = new();
    private List<MealCategory> mealCategories = new();
    private bool isLoading = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Pobranie diet
            diets = await MealsService.GetDietsAsync();

            // Pobranie kategorii posiłków
            mealCategories = await MealsService.GetMealCategoriesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnDietChanged(ChangeEventArgs e)
    {
        var selectedDietId = int.Parse(e.Value.ToString());
        meal.Diet = diets.FirstOrDefault(d => d.DietId == selectedDietId);
    }

    private void OnMealCategoryChanged(ChangeEventArgs e)
    {
        var selectedCategoryId = int.Parse(e.Value.ToString());
        meal.MealCategory = mealCategories.FirstOrDefault(c => c.MealCategoryId == selectedCategoryId);
    }

    private async Task AddMeal()
    {
        try
        {
            isLoading = true;

            // Wysłanie danych do API
            var response = await Http.PostAsJsonAsync("api/Meals", meal);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/meals");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to add meal: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}