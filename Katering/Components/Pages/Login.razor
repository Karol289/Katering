@page "/login"
@using Katering.Data.Service
@using Katering.Components.Pages.Model
@using Katering.Data.SessionState
@inject NavigationManager NavigationManager
@inject RegistrationService RegistrationService
@inject UserService UserService
@inject SessionState SessionState

<h3 class="login-title">Zaloguj się</h3>

<EditForm Model="Model" OnValidSubmit="LoginUser" FormName="LoginName">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="login">Login:</label>
        <br />
        <InputText @bind-Value="Model.Login" id="login" />
    </div>

    <div class="form-group">
        <label for="password">Hasło:</label>
        <br />
        <InputText @bind-Value="Model.Password" type="password" id="password" />
    </div>
    <div class="form-group">
        <button type="submit" class="submit-btn">Zaloguj się</button>
    </div>

</EditForm>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="error-container">
        <p class="text-danger">@ErrorMessage</p>
    </div>
}

@code {
    private EditContext editContext;

    private string? ErrorMessage { get; set; }

    public LoginModel Model { get; set; } = new LoginModel();

<<<<<<< HEAD
    protected override void OnInitialized()
    {
        editContext = new EditContext(Model);

    }   
=======
    protected override void OnInitialized() => Model ??= new();

>>>>>>> df9a245f6c96ab8d53d80ccf7fb8c5e0cef342d0
    private async Task LoginUser()
    {
        var validationErrors = Model.Validate();
        if (validationErrors.Count > 0)
        {
            ErrorMessage = string.Join("\n", validationErrors);
            return;
        }

        try
        {
            var result = await UserService.Login(Model);
            switch (result)
            {
                case LoginResult.SUCCESS:
                    NavigateByUserRole();
                    break;

                case LoginResult.UNKNOWN_EMAIL:
                    ErrorMessage = "Nieznany email. Sprawdź dane logowania i spróbuj ponownie.";
                    break;

                case LoginResult.ERROR:
                    ErrorMessage = "Nieprawidłowe hasło. Spróbuj ponownie.";
                    break;

                default:
                    ErrorMessage = "Wystąpił niespodziewany błąd przy logowaniu.";
                    break;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Wystąpił niespodziewany błąd przy logowaniu.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }

    private void NavigateByUserRole()
    {
        Console.WriteLine($"User Role: Admin - {SessionState.IsAdministration()}, Moderator - {SessionState.IsModerator()}, Contractor - {SessionState.IsContractor()}, Client - {SessionState.IsClient()}");

        if (SessionState.IsAdministration())
            NavigationManager.NavigateTo("/");
        else if (SessionState.IsModerator())
            NavigationManager.NavigateTo("/");
        else if (SessionState.IsContractor())
            NavigationManager.NavigateTo("/");
        else if (SessionState.IsClient())
            NavigationManager.NavigateTo("/");
        Console.WriteLine("No roles matched. Check SessionState implementations.");
    }
}
